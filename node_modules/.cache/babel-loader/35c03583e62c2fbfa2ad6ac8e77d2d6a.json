{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/lucystrickland/codingbootcamp/skindex/src/components/QuizModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ButtonGroup, Button, Modal, Alert } from 'react-bootstrap';\n\nfunction QuizModal(props) {\n  _s();\n\n  const [show, setShow] = useState(false); //set props to questions\n\n  const [questions, setQuestions] = useState(props.questions); //set initial answers array mapping questions and getting id value of the question and selected answer, answer empty on the beginning, don't really need this, but makes your life easier\n\n  const initialAnswers = [...questions.map(item => item = {\n    id: item.id,\n    selection: ''\n  })]; //user answers set to initialAnswers\n\n  const [userAnswers, setUserAnswers] = useState([...initialAnswers]); //state for checking if the form has been submitted\n\n  const [isSubmitted, setIsSubmitted] = useState(false); //or use useEffect and watch for props\n\n  const handleClose = () => {\n    setShow(false); //this is bootstrap close modal handler, setting here setIsSubmitted to false, so user can start the quiz again\n\n    setIsSubmitted(false);\n  };\n\n  const handleShow = () => setShow(true);\n\n  const handleSubmit = e => {\n    e.preventDefault(); //looking for empty selection values in userAnswers array\n\n    const empties = userAnswers.find(item => item.selection === ''); //if there are no empties, the .find method will return undefined, verifying that user selected answers to each series of questions\n\n    empties !== undefined ? //if user didn't answer all the questios, show it some message, for now just console.log\n    console.log('please select missing answers') : //if all qauetions has been answered, set isSubmited to true, also here you want to perform your axios call and send user data to DB\n    setIsSubmitted(true);\n    console.log('ready to send userAnswers to DB');\n  };\n\n  const handleAnswers = e => {\n    e.preventDefault(); //get question id assigned to the button as data-d\n\n    const id = parseInt(e.target.getAttribute('data-id')); //get value from selected button\n\n    const selection = e.target.getAttribute('data-selection'); //check if we already have it in array\n\n    const inArray = userAnswers.find(item => item.selection === selection); //create a new object to add to our array, \n    //also checking if the selected button was already selected and we have the same object in the array, \n    //in that case so we are going to deselect it and set the selection value to emty string \n\n    const userSelection = {\n      id,\n      selection: inArray ? '' : selection\n    }; //here we are mapping user answers and checking if we already have the answer with that id, and if we do, we replace it's value\n\n    const finalSelection = userAnswers.map(item => {\n      if (item.id === id) {\n        item = userSelection;\n      }\n\n      return item;\n    }); //finally assigning new state to user answers \n\n    setUserAnswers([...finalSelection]);\n  };\n\n  console.log(userAnswers);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      size: \"lg\",\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translateX(-50%) translateY(-50%)'\n      },\n      variant: \"outline-dark\",\n      onClick: handleShow,\n      className: \"text-uppercase font-weight-bold p-lg-4 p-3 rounded-0\",\n      children: \"Begin Your Skin Assessment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      backdrop: \"static\",\n      keyboard: false,\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        className: \"py-4\",\n        style: {\n          backgroundColor: '#ffd7bf',\n          color: '#21252d',\n          height: '90px'\n        },\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            position: 'absolute',\n            left: '50%',\n            transform: 'translateX(-50%)'\n          },\n          className: \"pb-5\",\n          children: \"Skin Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"bg-light my-3\",\n        children: !isSubmitted ? //checking if the user already submit the form, in that case we just show the submited information and if not, we show our questions\n        props.questions.map(question => {\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"mt-4 mb-3\",\n              style: {\n                textAlign: 'center',\n                color: '#404950'\n              },\n              children: question.question\n            }, question.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              \"aria-label\": \"selection\",\n              className: \"btn-group-justified w-100\",\n              children: question.answers.map(answer => {\n                //adding class 'active' if the button is selected\n                return /*#__PURE__*/_jsxDEV(Button, {\n                  className: `${userAnswers.find(item => item.selection === answer) ? 'active' : ''}  py-lg-3 border rounded-0`,\n                  variant: \"secondary\",\n                  \"data-selection\": answer,\n                  \"data-id\": question.id,\n                  onClick: handleAnswers,\n                  style: {\n                    overflowWrap: 'anywhere'\n                  },\n                  children: answer\n                }, question.id + answer, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 13\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 9\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              textAlign: 'center'\n            },\n            children: \"Your submitted information:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n            \"aria-label\": \"selection\",\n            className: \"btn-group-justified w-100 my-5\",\n            children: userAnswers.map(item => {\n              return /*#__PURE__*/_jsxDEV(Button, {\n                className: `py-lg-3 border rounded-0`,\n                variant: \"dark\",\n                onClick: handleAnswers,\n                style: {\n                  overflowWrap: 'anywhere'\n                },\n                disabled: true,\n                children: item.selection\n              }, item.id + item.selection, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 11\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        style: {\n          backgroundColor: '#ffd7bf',\n          color: '#21252d',\n          height: '80px'\n        },\n        children: isSubmitted ? null : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"link\",\n          size: \"lg\",\n          className: \"mx-auto text-uppercase font-weight-bold text-dark\",\n          onClick: (handleClose, handleSubmit),\n          children: \"Submit Answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(QuizModal, \"7z7uer4lKfUIfF7McDE9nU8ZIwM=\");\n\n_c = QuizModal;\nexport default QuizModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizModal\");","map":{"version":3,"sources":["/Users/lucystrickland/codingbootcamp/skindex/src/components/QuizModal.js"],"names":["React","useState","useEffect","ButtonGroup","Button","Modal","Alert","QuizModal","props","show","setShow","questions","setQuestions","initialAnswers","map","item","id","selection","userAnswers","setUserAnswers","isSubmitted","setIsSubmitted","handleClose","handleShow","handleSubmit","e","preventDefault","empties","find","undefined","console","log","handleAnswers","parseInt","target","getAttribute","inArray","userSelection","finalSelection","position","top","left","transform","backgroundColor","color","height","question","textAlign","answers","answer","overflowWrap"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ButtonGroup, Button, Modal, Alert } from 'react-bootstrap';\n\nfunction QuizModal(props) {\n\tconst [show, setShow] = useState(false);\n\t//set props to questions\n\tconst [questions, setQuestions] = useState(props.questions);\n\t//set initial answers array mapping questions and getting id value of the question and selected answer, answer empty on the beginning, don't really need this, but makes your life easier\n\tconst initialAnswers = [\n\t\t...questions.map(item => (item = { id: item.id, selection: '' })),\n\t];\n\t//user answers set to initialAnswers\n\tconst [userAnswers, setUserAnswers] = useState([...initialAnswers]);\n\t//state for checking if the form has been submitted\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\t//or use useEffect and watch for props\n\tconst handleClose = () => {\n\t\tsetShow(false);\n\t\t//this is bootstrap close modal handler, setting here setIsSubmitted to false, so user can start the quiz again\n\t\tsetIsSubmitted(false);\n\t};\n\tconst handleShow = () => setShow(true);\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\t//looking for empty selection values in userAnswers array\n\t\tconst empties = userAnswers.find(item => item.selection === '');\n\t\t//if there are no empties, the .find method will return undefined, verifying that user selected answers to each series of questions\n\t\tempties !== undefined\n\t\t\t? //if user didn't answer all the questios, show it some message, for now just console.log\n\t\t\t  console.log('please select missing answers')\n\t\t\t: //if all qauetions has been answered, set isSubmited to true, also here you want to perform your axios call and send user data to DB\n\t\t\t  setIsSubmitted(true);\n\t\tconsole.log('ready to send userAnswers to DB');\n\t};\n\tconst handleAnswers = e => {\n\t\te.preventDefault();\n\t\t//get question id assigned to the button as data-d\n\t\tconst id = parseInt(e.target.getAttribute('data-id'));\n\t\t//get value from selected button\n\t\tconst selection = e.target.getAttribute('data-selection');\n\t\t//check if we already have it in array\n\t\tconst inArray = userAnswers.find(item => item.selection === selection);\n\t\t//create a new object to add to our array, \n\t\t//also checking if the selected button was already selected and we have the same object in the array, \n\t\t//in that case so we are going to deselect it and set the selection value to emty string \n\t\tconst userSelection = { id, selection: inArray ? '' : selection };\n\t\t//here we are mapping user answers and checking if we already have the answer with that id, and if we do, we replace it's value\n\t\tconst finalSelection = userAnswers.map(item => {\n\t\t\tif (item.id === id) {\n\t\t\t\titem = userSelection;\n\t\t\t}\n\t\t\treturn item;\n\t\t});\n\t\t//finally assigning new state to user answers \n\t\tsetUserAnswers([...finalSelection]);\n\t};\n\tconsole.log(userAnswers);\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tsize='lg'\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: '50%',\n\t\t\t\t\tleft: '50%',\n\t\t\t\t\ttransform: 'translateX(-50%) translateY(-50%)',\n\t\t\t\t}}\n\t\t\t\tvariant='outline-dark'\n\t\t\t\tonClick={handleShow}\n\t\t\t\tclassName='text-uppercase font-weight-bold p-lg-4 p-3 rounded-0'\n\t\t\t>\n\t\t\t\tBegin Your Skin Assessment\n\t\t\t</Button>\n\t\t\t<Modal\n\t\t\t\tshow={show}\n\t\t\t\tonHide={handleClose}\n\t\t\t\tbackdrop='static'\n\t\t\t\tkeyboard={false}\n\t\t\t\taria-labelledby='contained-modal-title-vcenter'\n\t\t\t\tcentered\n\t\t\t\tsize='lg'\n\t\t\t>\n\t\t\t\t<Modal.Header\n\t\t\t\t\tclassName='py-4'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: '#ffd7bf',\n\t\t\t\t\t\tcolor: '#21252d',\n\t\t\t\t\t\theight: '90px',\n\t\t\t\t\t}}\n\t\t\t\t\tcloseButton\n\t\t\t\t>\n\t\t\t\t\t<h2\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\tleft: '50%',\n\t\t\t\t\t\t\ttransform: 'translateX(-50%)',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName='pb-5'\n\t\t\t\t\t>\n\t\t\t\t\t\tSkin Quiz\n\t\t\t\t\t</h2>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body className='bg-light my-3'>\n\t\t\t\t\t{!isSubmitted ? ( //checking if the user already submit the form, in that case we just show the submited information and if not, we show our questions\n\t\t\t\t\t\tprops.questions.map(question => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t<h3\n\t\t\t\t\t\t\t\t\t\tclassName='mt-4 mb-3'\n\t\t\t\t\t\t\t\t\t\tstyle={{ textAlign: 'center', color: '#404950' }}\n\t\t\t\t\t\t\t\t\t\tkey={question.id}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{question.question}\n\t\t\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t\t\t<ButtonGroup\n\t\t\t\t\t\t\t\t\t\taria-label='selection'\n\t\t\t\t\t\t\t\t\t\tclassName='btn-group-justified w-100'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{question.answers.map(answer => {\n\t\t\t\t\t\t\t\t\t\t\t//adding class 'active' if the button is selected\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`${ \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuserAnswers.find(item => item.selection === answer)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? 'active'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t\t\t\t\t\t\t}  py-lg-3 border rounded-0`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant='secondary'\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata-selection={answer}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata-id={question.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={question.id + answer}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={handleAnswers}\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ overflowWrap: 'anywhere' }}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{answer}\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<h2 style={{ textAlign: 'center' }}>\n\t\t\t\t\t\t\t\tYour submitted information:\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t<ButtonGroup\n\t\t\t\t\t\t\t\taria-label='selection'\n\t\t\t\t\t\t\t\tclassName='btn-group-justified w-100 my-5'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{userAnswers.map(item => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tclassName={`py-lg-3 border rounded-0`}\n\t\t\t\t\t\t\t\t\t\t\tvariant='dark'\n\t\t\t\t\t\t\t\t\t\t\tkey={item.id + item.selection}\n\t\t\t\t\t\t\t\t\t\t\tonClick={handleAnswers}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ overflowWrap: 'anywhere' }}\n\t\t\t\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{item.selection}\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</Modal.Body>\n\t\t\t\t<Modal.Footer\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: '#ffd7bf',\n\t\t\t\t\t\tcolor: '#21252d',\n\t\t\t\t\t\theight: '80px',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{isSubmitted ? null : (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant='link'\n\t\t\t\t\t\t\tsize='lg'\n\t\t\t\t\t\t\tclassName='mx-auto text-uppercase font-weight-bold text-dark'\n\t\t\t\t\t\t\tonClick={(handleClose, handleSubmit)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSubmit Answers\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\nexport default QuizModal;"]},"metadata":{},"sourceType":"module"}